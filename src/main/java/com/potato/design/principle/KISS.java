package com.potato.design.principle;

/**
 * @author dehuab
 * <p>
 * Keep It Simple and Stupid.
 * Keep It Short and Simple.
 * Keep It Simple and Straightforward.
 * </p>
 * <p>
 * 代码的可读性和可维护性是衡量代码质量非常重要的两个标准。
 * 而 KISS 原则就是保持代码可读和可维护的重要手段。代码足够简单，也就意味着很容易读懂，bug 比较难隐藏。即便出现 bug，修复起来也比较简单。
 * </p>
 * <p>
 * 写出满足KISS原则代码的方法：
 * 1、不要使用同事可能不懂的技术来实现代码。比如前面例子中的正则表达式，还有一些编程语言中过于高级的语法等。
 * 2、不要重复造轮子，要善于使用已经有的工具类库。经验证明，自己去实现这些类库，出 bug 的概率会更高，维护的成本也比较高。
 * 3、不要过度优化。不要过度使用一些奇技淫巧（比如，位运算代替算术运算、复杂的条件语句代替 if-else、使用一些过于底层的函数等）来优化代码，牺牲代码的可读性。
 * </p>
 * <p>
 * 代码是否足够简单是一个挺主观的评判。同样的代码，有的人觉得简单，有的人觉得不够简单。而往往自己编写的代码，自己都会觉得够简单。
 * 所以，评判代码是否简单，还有一个很有效的间接方法，那就是 code review。如果在 code review 的时候，同事对你的代码有很多疑问，那就说明你的代码有可能不够“简单”，需要优化啦。
 * 在做开发的时候，一定不要过度设计，不要觉得简单的东西就没有技术含量。实际上，越是能用简单的方法解决复杂的问题，越能体现一个人的能力。
 * </p>
 */
public class KISS {
}
